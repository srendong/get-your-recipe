{"version":3,"sources":["serviceWorker.js","components/Form/Form.jsx","components/Recipes/Recipes.jsx","App.js","components/Recipe/Recipe.jsx","components/Router.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Form","props","react_default","a","createElement","className","onSubmit","getRecipe","type","name","Recipes","_ref","recipes","Fragment","map","recipe","Card","key","recipe_id","style","width","Img","height","variant","src","image_url","Body","Title","title","length","concat","substring","Button","react_router_dom","to","pathname","state","ApiKey","App","_callee","e","recipeName","ApiCall","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","_this","setState","console","log","stop","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","components_Form_Form","this","components_Recipes_Recipes","Component","Recipe","activeRecipe","req","res","alt","publisher","href","publisher_url","Router","react_router","path","component","exact","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75836450.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst Form = (props) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <form onSubmit={props.getRecipe}>\n          <input type=\"text\" name=\"recipeName\" />\n          <button>Search</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst Recipes = ({ recipes }) => {\n  return (\n    <>\n      <div className=\"container fluid\">\n        <div className=\"row justify-content-center\">\n          {recipes.map(recipe => {\n            return (\n              <Card\n                key={recipe.recipe_id}\n                className=\"col-sm-1 col-md-4 mt-4 p-1\"\n                style={{ width: \"18rem\" }}\n              >\n                <Card.Img\n                  style={{ height: \"15rem\" }}\n                  variant=\"top\"\n                  src={recipe.image_url}\n                />\n                <Card.Body>\n                  <Card.Title className=\"text-center\">\n                    {recipe.title.length < 20\n                      ? `${recipe.title}`\n                      : `${recipe.title.substring(0, 20)}...`}\n                  </Card.Title>\n                  <Button variant=\"primary\">\n                    <Link\n                      to={{\n                        pathname: `/recipe/${recipe.recipe_id}`,\n                        state: { recipe: recipe.title }\n                      }}\n                    >\n                      View recipe\n                    </Link>\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Recipes;\n","import React, { Component } from \"react\";\nimport \"./Styles/App.scss\";\nimport Form from \"../src/components/Form/Form\";\nimport Recipes from \"../src/components/Recipes/Recipes\";\n\nconst ApiKey = \"a6c18ef54ea00485a426654f7cd36dd5\";\n\nclass App extends Component {\n  state = {\n    recipes: []\n  };\n\n  getRecipe = async e => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    const ApiCall = await fetch(\n      `https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${ApiKey}&q=${recipeName}&count=12`\n    );\n    const data = await ApiCall.json();\n    this.setState({ recipes: data.recipes });\n    console.log(this.state.recipes);\n  };\n\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(json);\n    this.setState({ recipes });\n  };\n\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  };\n\n  render() {\n    return (\n      <>\n        <header>\n          <h1 className=\"App-header\">Recipe Search</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom'\n\nconst ApiKey = \"a6c18ef54ea00485a426654f7cd36dd5\";\n\nclass Recipe extends Component {\n  state = {\n    activeRecipe: []\n  };\n\n  componentDidMount = async () => {\n    const title = this.props.location.state.recipe;\n    const req = await fetch(\n      `https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${ApiKey}&q=${title}`\n    );\n    const res = await req.json();\n    this.setState({ activeRecipe: res.recipes[0] });\n    console.log(this.state.activeRecipe);\n  };\n\n  render() {\n    const recipe = this.state.activeRecipe;\n    return (\n      <div className=\"container\">\n        {this.state.activeRecipe.length !== 0 && (\n          <div className=\"row justify-content-center\">\n            <img className=\"col-8\" src={recipe.image_url} alt={recipe.title} />{\" \"}\n            <br />\n            <h3 className=\"col-12 text-center\">{recipe.title}</h3>\n            <h5>Publusher: </h5>\n            <span>{recipe.publisher}</span>\n            <h5 className=\"col-12 text-center\">Active recipe: </h5>\n            <span>\n              <a href={recipe.publisher_url}>{recipe.publisher_url}</a>\n            </span>\n            <br/>\n            <button className=\"col-12 text-center\">\n            <Link to='/'>Go home</Link>\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Recipe;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport App from \"../App\";\nimport Recipe from \"../components/Recipe/Recipe\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" component={App} exact />\n      <Route path=\"/recipe/:id\" component={Recipe} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport  'bootstrap/dist/css/bootstrap.css'\nimport Router from './components/Router';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}